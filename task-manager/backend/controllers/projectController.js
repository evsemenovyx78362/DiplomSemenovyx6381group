const Project = require('../models/projectModel');
const Task = require('../models/taskModel');

// üìå –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
exports.createProject = async(req, res) => {
    const { name, description, deadline, teamMembers } = req.body;
    try {
        const project = await new Project({
            name,
            description,
            deadline,
            teamMembers,
            owner: req.user.id
        }).save();

        res.status(201).json(project);
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
};

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
exports.getProjects = async(req, res) => {
    try {
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        const projects = await Project.find({
            $or: [{ owner: req.user.id }, { teamMembers: req.user.id }],
        }).populate('teamMembers', 'name email').populate('owner', 'name email');
        res.json(projects);
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
};


// üìå –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ ID
exports.getProjectById = async(req, res) => {
    try {
        const project = await Project.findById(req.params.id)
            .populate('owner', 'name email')
            .populate('teamMembers', 'name email');

        if (!project) {
            return res.status(404).json({ msg: 'Project not found' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞
        const isMember = project.teamMembers.some(member => member._id.toString() === req.user.id);
        const isOwner = project.owner._id.toString() === req.user.id;

        if (!isMember && !isOwner) {
            return res.status(403).json({ msg: 'Access denied' });
        }

        res.json(project);
    } catch (err) {
        console.error(err.message);
        if (err.kind === 'ObjectId') {
            return res.status(404).json({ msg: 'Project not found' });
        }
        res.status(500).send('Server Error');
    }
};

// üìå –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
exports.updateProject = async(req, res) => {
    try {
        let project = await Project.findById(req.params.id);
        if (!project) return res.status(404).json({ msg: 'Project not found' });

        // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç
        if (project.owner.toString() !== req.user.id) {
            return res.status(403).json({ msg: 'Access denied. Only the owner can update the project.' });
        }

        project = await Project.findByIdAndUpdate(
            req.params.id, { $set: req.body }, { new: true }
        ).populate('teamMembers', 'name email').populate('owner', 'name email');

        res.json(project);
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
};

// üìå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
exports.deleteProject = async(req, res) => {
    try {
        const project = await Project.findById(req.params.id);
        if (!project) {
            return res.status(404).json({ msg: 'Project not found' });
        }

        // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
        if (project.owner.toString() !== req.user.id) {
            return res.status(403).json({ msg: 'Access denied. Only the owner can delete the project.' });
        }

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º
        await Task.deleteMany({ project: req.params.id });

        // –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–æ–µ–∫—Ç
        await Project.findByIdAndDelete(req.params.id);

        res.json({ msg: 'Project and all associated tasks removed' });
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
};